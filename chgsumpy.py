#!/usr/bin/env python3
#########################
#    BEKK@HAMZA         #
#    2023/2024          #
#########################

def print_art():
    art = """
                                                            ,,,  
                                                          /'^'\\
                                                         ( o o )
-------------------------------------------------------oOOO--(_)--OOOo------

        chgsumpy1
	---------------------
        (._.) Description:
             This Python script is designed to sum two CHGCAR files generated by the VASP6.x code,
             specifically the core charge density file (AECCAR0) and 
             the valence charge density file (AECCAR2).
             *- add  LAECHG=.TRUE. in the INCAR file:
        (._.) Purpose: This script facilitates the summation of the two charge density files.
        (._.) Created by Bekk@ Hamza.
        (._.) Coordinate: 
                    .:. Dev: Bekkali Hamza
                    .:. Email: hamza_bekkali@um5.ac.ma
                        (C) 2024
                                                        .oooO
                                                        (   )   Oooo. Bekk@ Hamza
---------------------------------------------------------\\ (----(   )-------
                                                          \\_)    ) /
.:.                                                              (_/
"""
    print(art)

import sys
print_art()
if len(sys.argv) < 2:
    print("usage: chgsum.py <CHGCAR1> <CHGCAR2> <fact1> <fact2>")
    sys.exit(1)

try:
    with open(sys.argv[1], 'r') as in1, open(sys.argv[2], 'r') as in2, open("CHGCAR_avg.vasp", 'w') as out:
        fact1 = fact2 = 1.0
        if len(sys.argv) > 3:
            fact1 = float(sys.argv[3])
        if len(sys.argv) > 4:
            fact2 = float(sys.argv[4])

        header1,header2 = "",""
        for _ in range(5):
            header1 += in1.readline()
            header2 += in2.readline()
        # Check whether it is a vasp5 format
        line1 = in1.readline()
        header1 += line1;
        line1 = line1.lstrip()
        line1_parts = line1.split()
        if line1_parts[0].isdigit():
            atoms1 = list(map(float, line1_parts))
        else:
            atoms1 = in1.readline()
            header1 += atoms1
            atoms1 = atoms1.lstrip()
            atoms1 = list(map(float, atoms1.split()))

        line2 = in2.readline() 
        header2 += line2
        line2 = line2.lstrip()
        line2_parts = line2.split()

        if line2_parts[0].isdigit():
            atoms2 = list(map(float, line2_parts))
        else:
            atoms2 = in2.readline()
            header2 += atoms2
            atoms2 = atoms2.lstrip()
            atoms2 = list(map(float, atoms2.split()))
        
        sum1 = sum(atoms1)
        sum2 = sum(atoms2)
        
        print(f".:. Nb of elements in file1: {sum1} || in file2: {sum2}")

        # Print number of points
        for _ in range(int(sum1)+2):
           header1 += in1.readline()
           header2 += in2.readline()
        point1=in1.readline();point2=in2.readline()
        points1= point1.lstrip();points2= point2.lstrip()
        points1=list(map(float,points1.split()))
        points2=list(map(float,points2.split()))
        psum1 = int(points1[0]*points1[1]*points1[2])
        psum2 =int( points2[0]*points2[1]*points2[2])
      
        print(f".:. Nb of Points in file1: {psum1} ||  in file2: {psum2}")

        if psum1 != psum2:
            print("Number of points not same in two files!")
            sys.exit(1)

        out.write(header1)

        for i in range(psum1 // 5):
            line1 = in1.readline().lstrip()
            line2 = in2.readline().lstrip()
            line1_parts = list(map(float, line1.split()))
            line2_parts = list(map(float, line2.split()))

            result_line = [
                fact1 * line1_parts[j] + fact2 * line2_parts[j]
                for j in range(len(line1_parts))
            ]

            # Write formatted output to the file
            out.write(" ".join(f"{value:18.11E}" for value in result_line) + "\n")

except IOError as e:
    print(f"Can't open file: {e}")
    sys.exit(1)


print("(._.) THANKS: This script is inspired by the VTST group , whose resources can be found at VTST Tools.")
